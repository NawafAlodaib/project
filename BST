public class BST {
    public class Node {
        String key;
        LL<Photo> value;
        Node left, right;
        
        Node(String key, LL<Photo> value) {
            this.key = key;
            this.value = value;
        }
    }

    public Node root;

    public BST() {
        root = null;
    }

    public void insert(String key, LL<Photo> value) {
        root = insertRec(root, key, value);
    }

    private Node insertRec(Node node, String key, LL<Photo> value) {
        if (node == null) return new Node(key, value);

        int tmp = key.compareTo(node.key);//compare to to check if it smaller or greater  
        if (tmp < 0) node.left = insertRec(node.left, key, value);
        else if (tmp > 0) node.right = insertRec(node.right, key, value);
        else node.value = value; // replace value if key exist

        return node;
    }

    public LL<Photo> search(String key) {
        Node node = searchRec(root, key);
        
        if (node == null) return null;
        return node.value; 
    }

    private Node searchRec(Node node, String key) {
    	
        if (node == null) return null;
    	
        int tmp = key.compareTo(node.key);//compare to to check if it smaller or greater  
        if (tmp < 0) return searchRec(node.left, key);
        else if (tmp > 0) return searchRec(node.right, key);
        else return node;
    }

    public void delete(String key) {
        root = deleteRec(root, key);
    }

    private Node deleteRec(Node node, String key) { 
        if (node == null) return null;

        int tmp = key.compareTo(node.key);//compare to to check if it smaller or greater  
        if (tmp < 0) node.left = deleteRec(node.left, key);
        else if (tmp > 0) node.right = deleteRec(node.right, key);
        else {
            if (node.left == null) return node.right;
            if (node.right == null) return node.left;

            Node min = minValueNode(node.right);
            node.key = min.key;
            node.value = min.value;
            node.right = deleteRec(node.right, min.key);
        }
        return node;
    }

    private Node minValueNode(Node node) {  //return the node with minemum value
        while (node.left != null) node = node.left;
        return node;
    }
    
   
}
